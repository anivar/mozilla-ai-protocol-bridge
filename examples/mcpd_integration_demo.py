#!/usr/bin/env python3
"""MCP-ACP Bridge Demo with mcpd Identity Integration

Shows how to:
1. Use identity generated by mcpd
2. Bridge MCP server with verified identity
3. Expose tools via ACP with identity metadata
"""

import asyncio
import sys
import os
sys.path.append('..')

from bridge.config_acp import MCPToACPBridgeConfig
from bridge.server_acp import serve_mcp_as_acp_async


async def main():
    print("üîê MCP-ACP Bridge Demo with mcpd Identity")
    print("=" * 45)
    
    # Check if mcpd identity exists
    org = "mozilla-ai"
    server = "github-tools"
    identity_id = f"did:agntcy:mcpd:{org}:{server}"
    
    print("üìã Prerequisites:")
    print(f"   1. Install mcpd with PR #154 (AGNTCY Identity support)")
    print(f"   2. Enable identity: export MCPD_IDENTITY_ENABLED=true")
    print(f"   3. Generate identity: mcpd identity init {server} --org {org}")
    print(f"   4. Expected DID: {identity_id}")
    print()
    
    # Bridge configuration using mcpd identity
    bridge_config = MCPToACPBridgeConfig(
        # MCP server started via mcpd
        mcp_command="mcpd",
        mcp_args=["run", server],
        host="localhost",
        port=8092,
        endpoint="/mcpd-bridge",
        server_name=server,
        organization=org,
        identity_id=identity_id,  # Identity from mcpd
        version="1.0.0"
    )
    
    print(f"üöÄ Starting bridge with mcpd identity:")
    print(f"   Server: {bridge_config.server_name}")
    print(f"   Identity: {bridge_config.identity_id}")
    print(f"   Organization: {bridge_config.organization}")
    print(f"   URL: http://{bridge_config.host}:{bridge_config.port}{bridge_config.endpoint}")
    
    # Start the bridge server
    server_handle = await serve_mcp_as_acp_async(bridge_config)
    
    await asyncio.sleep(1)
    
    print("\n‚úÖ Bridge is running with mcpd identity!")
    
    print("\nüîç ACP API now exposes MCP tools with verified identity:")
    
    print("\n1. Get agent manifest (includes identity):")
    print(f"   curl http://localhost:8092/mcpd-bridge/agents | jq")
    
    print("\n2. Verify identity in metadata:")
    print(f'   curl http://localhost:8092/mcpd-bridge/agents | jq ".[] | .metadata.identity_id"')
    
    print("\n3. Execute tool with identity verification:")
    print(f'''   curl -X POST http://localhost:8092/mcpd-bridge/runs/stateless \\
     -H "Content-Type: application/json" \\
     -d '{{"config": {{"tool": "list_repos", "args": {{"org": "mozilla-ai"}}}}}}'
    ''')
    
    print("\nüîê Identity Flow:")
    print("   1. mcpd generates cryptographic identity (Ed25519)")
    print("   2. MCP server runs with verified identity")
    print("   3. Bridge reads identity from config") 
    print("   4. ACP exposes identity in manifest")
    print("   5. Clients can verify tool authenticity")
    
    print("\nüìä Cross-Bridge Identity Integration:")
    print("   ‚Ä¢ mcpd PR #154: Generates did:agntcy:mcpd:mozilla-ai:github-tools")
    print("   ‚Ä¢ MCP-A2A Bridge (PR #757): Uses identity for logging/audit")
    print("   ‚Ä¢ MCP-ACP Bridge (this POC): Uses identity AND exposes in metadata")
    print("   ‚Ä¢ All bridges use the SAME identity from mcpd")
    
    print("\n‚ö° Benefits:")
    print("   ‚Ä¢ Enterprise-grade security")
    print("   ‚Ä¢ W3C DID compliance")
    print("   ‚Ä¢ Audit trail for all tool usage")
    print("   ‚Ä¢ Foundation for mutual TLS")
    
    print("\nPress Ctrl+C to stop the bridge...")
    
    try:
        # Keep running
        await server_handle.wait_closed()
    except KeyboardInterrupt:
        print("\n\nüëã Stopping bridge...")
        await server_handle.cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nBridge stopped.")